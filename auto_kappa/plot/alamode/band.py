# -*- coding: utf-8 -*-
#
# band.py
#
# This file creates Band class reading .bands file generated by Alamode.
#
# Copyright (c) 2022 Masato Ohnishi
#
# This file is distributed under the terms of the MIT license.
# Please see the file 'LICENCE.txt' in the root directory
# or http://opensource.org/licenses/mit-license.php for information.
#
import numpy as np

class Band():
    def __init__(self, filename=None):
        """Band
        Variables
        -----------
        unit : string
            unit of frequency
        nk : integer
            # of k points
        nbands : integer
            # of bands
        kpoints : array, float, shape=(nk)
            k-points
        frequencies : ndarray, float, shape=(nk, nbands)
            frequencies
        label : array, string, shape=(nsym)
            Labels for symmetry points
        ksym : array, float, shape=(nsym)
            k-points for symmetry points
        nsym : integer
            # of symmetry points
        """
        self.unit = "cm^1"
        self.nk = None
        self.nbands = None
        
        ### eigenvalues and vectors
        self.band_type = None
        self.temperatures = None
        self.kpoints = None
        self.freqencies = None
        
        ### symmetry points
        self.label = None
        self.ksym = None
        if filename is not None:
            self.read_bfile(filename)
    
    def set_nk_nbands(self, bfile):
        self.nk, self.nbands = get_nk_nbands(bfile)
    
    def set_symmetry_points(self, bfile):
        self.label, self.ksym = get_symmetry_points_from_filename(bfile)
    
    def set_eigen(self, bfile):
        """ Read band file crated by ALAMODE """
        out = get_eigen(bfile)
        if len(out) == 2:
            self.band_type = "normal"
            self.kpoints = out[0]
            self.frequencies = out[1]
        elif len(out) == 3:
            self.band_type = "scph"
            self.temperatures = out[0]
            self.kpoints = out[1]
            self.frequencies = out[2]
        else:
            print(" Error:")
            sys.exit()
    
    def read_bfile(self, bfile):
        """Read band file
        """
        self.set_nk_nbands(bfile)
        self.set_symmetry_points(bfile)
        self.set_eigen(bfile)
    

def get_nk_nbands(bfile):
    """Get nk and nbands from band file
    Parameters
    ------------
    bfile : string
        band file name of ALAMODE
    
    Returns
    ----------
    nk, nband : integer
        # of k-points and bands
    """
    nline = sum(1 for line in open(bfile))
    nk = nline - 3
    ifs = open(bfile, "r")
    for i in range(4):
        line = ifs.readline()
    data = line.split()
    nbands = len(data) - 1
    return nk, nbands

def get_symmetry_points_from_filename(bfile):
    """Read symmetry points from band file
    
    Returns
    ---------
    label : string
        label for symmetry points
    
    ksym : double
        \|k\| for symmetry points
    
    """
    ifs = open(bfile, "r")
    nline = sum(1 for line in open(bfile))
    lines = []
    lines.append(ifs.readline())
    lines.append(ifs.readline())
    return get_symmetry_points_from_string(lines)

def get_symmetry_points_from_string(lines):
    """Read symmetry points from band file
    
    Returns
    ---------
    label : string
        label for symmetry points
    
    ksym : double
        \|k\| for symmetry points
    
    """
    data1 = lines[0].split()
    data2 = lines[1].split()
    
    label_tmp = []
    kpoints = []
    for i in range(len(data1)-1):
        label_tmp.append(data1[1+i])
        kpoints.append(float(data2[1+i]))
    label = []
    nticks = len(label_tmp)
    for it in range(nticks):
        lab0 = label_tmp[it]
        lab = label_tmp[it]
        if it != 0 and it != nticks-1:
            if abs(kpoints[it] - kpoints[it+1]) < 1e-5:
                lab = "%s|%s" % (lab0, label_tmp[it+1])
            if abs(kpoints[it] - kpoints[it-1]) < 1e-5:
                lab = "%s|%s" % (label_tmp[it-1], lab0)

        ### ver.1
        #if "gamma" in lab.lower() or 'G' in lab:
        #    label.append("G")
        #else:
        #    label.append("%s"%(lab))
        #
        ### ver.2
        lab = lab.upper()
        label.append(lab)
    
    ### adjust
    lab_new = []
    knew = []
    lab_new.append(label[0])
    knew.append(kpoints[0])
    for ii in range(1,len(label)):
        if (abs(kpoints[ii] - kpoints[ii-1]) < 1e-5 and
                label[ii] == label[ii-1]):
            pass
        else:
            lab_new.append(label[ii])
            knew.append(kpoints[ii])
    return lab_new, knew

def get_eigen(filename):
    """ Get kpoints and frequencies """
    
    ### check whether normal band or scph bands
    lines = open(filename, 'r').readlines()

    if "temperature" in lines[2].lower():
        return get_scph_bands(filename)
    else:
        return get_normal_bands(filename)

def get_normal_bands(filename):
    """ Read .bands file """
    dump = np.genfromtxt(filename)
    kpoints = dump[:,0]
    frequencies = dump[:,1:]
    return [kpoints, frequencies]

def get_scph_bands(filename, tol=0.1):
    """ Read .scph_bands file and return array of dictionary for each 
    temperature.
    """
    dump = np.genfromtxt(filename)
    ndat = len(dump[:,0])

    ### get list of temperatures
    temperatures = []
    temperatures.append(dump[0,0])
    for i in range(1, ndat):
        T0 = dump[i-1,0]
        T1 = dump[i,0]
        if abs(T1 - T0) > tol:
            temperatures.append(T1)
    temperatures = np.asarray(temperatures)
    
    ###
    kpoints = []
    frequencies = []
    for temp in temperatures:
        idx = np.where(abs(dump[:,0] - temp) < tol)[0]
        kpoints.append(dump[idx,1])
        frequencies.append(dump[idx,2:])
        
    return [temperatures, kpoints, frequencies]

#def get_eigen(bfile, nk, nbands):
#    """Get kpoints and eigenvalues from band file
#    Parameters
#    ----------
#    bfile : string
#        band file name
#    nk, nbnads : integer
#        # of kpoints and bands
#    Returns
#    --------
#    kpoints : float, shape=(nk)
#        k-points
#    freqs : float, shape=(nk, nbands)
#        frequencies
#    """
#    ifs = open(bfile, "r")
#    nline = sum(1 for line in open(bfile))
#    kpoints = np.zeros(nk)
#    freqs = np.zeros((nk, nbands))
#    count = 0
#    for il in range(nline):
#        line = ifs.readline()
#        data = line.split()
#        if len(data) == 0:
#            continue
#        if line[0] == "#":
#            continue
#        kpoints[count] = float(data[0])
#        for ib in range(nbands):
#            freqs[count,ib] = float(data[1+ib])
#        count += 1
#    ifs.close()
#    return kpoints, freqs

