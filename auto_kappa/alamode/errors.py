# -*- coding: utf-8 -*-
#
# errors.py
#
# Treat unexpected errors for ALAMODE
#
# Copyright (c) 2024 Masato Ohnishi
#
# This file is distributed under the terms of the MIT license.
# Please see the file 'LICENCE.txt' in the root directory
# or http://opensource.org/licenses/mit-license.php for information.
#
import os
import sys
import shutil
import glob
import logging

from auto_kappa import output_directories
from auto_kappa.alamode.log_parser import get_version

logger = logging.getLogger(__name__)

def _print_error_message(filename, error_msg):
    """ """
    msg = "\n Error found in %s:\n" % filename
    msg += error_msg
    logger.error(msg)

def check_unexpected_errors(logfile, dir_base=None):
    """ 
    
    Return
    =========
    int : 
        0 if not error was found.
        1 error was found
    """
    dir_box = "./box"
    if os.path.exists(logfile) == False:
        return None
    
    ### error messages
    result_err = "KPOINT information is not consistent".lower()
    version_err = "FCSXML files generated by older versions".lower()
    
    ### check each line
    ### If flag > 0, the job will be stopped.
    flag = 0
    lines = open(logfile, 'r').readlines()
    for line_tmp in lines:

        line = line_tmp.lower()

        ### Error in .result file
        if result_err in line:
            
            _print_error_message(logfile, line)
            
            if logfile == "kappa.log":
                ### The job can be continued after .result file is removed.
                _error_in_alamode_result()
                flag += 0
            else:
                msg = "\n Error in %s" % logfile
                msg += "\n The error is not supported yet."
                logger.error(msg)
                sys.exit()
        
        ### Version error
        if version_err in line:
            
            _print_error_message(logfile, line)
            #ver_target = get_version(logfile)
            
            if logfile in ["cv.log", "lasso.log", "fc3.log"]:
                if is_fc_given(logfile, order=1):
                    _remove_harmonic_fcs(dir_base)
                    flag += 1
                if is_fc_given(logfile, order=2):
                    if logfile == "fc3.log":
                        _remove_harmonic_fcs(dir_base)
                    _remove_cubic_fcs(dir_base)
                    flag += 10
            else:
                msg = "\n Error in %s" % logfile
                msg += "\n The error is not supported yet."
                logger.error(msg)
                sys.exit()
    
    ### Stop the calculation
    if flag != 0:
        msg = "\n Stop the calculation because of the error."
        msg += "\n Please rerun the calculation."
        logger.error(msg)
        sys.exit()
    
    return flag

def is_fc_given(logfile, order=None):
    """ """
    name = "FC%dXML =" % (order+1)
    lines = open(logfile, 'r').readlines()
    
    flag = False
    for line in lines:
        if name in line:
            flag = True
            break
    ##
    if flag:
        if len(line.split()) > 2:
            return True
        else: 
            return False
    else:
        return False

def _remove_harmonic_fcs(dir_base):
    """ """
    dir_box = "./box"
    dir_init = os.getcwd()
    
    ### FC2
    dir_fc2 = dir_base + "/" + output_directories["harm"]["force"]
    if os.path.exists(dir_fc2) == False:
        msg = "\n Error : cannot find %s" % dir_fc2.replace(dir_base, ".")
        logger.error(msg)
        sys.exit()
    
    os.chdir(dir_fc2)
    os.makedirs(dir_box, exist_ok=True)
    for fns in (
            glob.glob("fc2.*"),
            glob.glob("*.fcs"),
            glob.glob("*.xml")):
        for ff in fns:
            shutil.move(ff, dir_box+"/"+ff)
    os.chdir(dir_init)
    
    ### Band and DOS
    dir_bandos = dir_base + "/" + output_directories["harm"]["bandos"]
    if os.path.exists(dir_bandos) == False:
        return 0
    else:
        msg = "\n Remove %s" % dir_bandos.replace(dir_base, ".")
        shutil.rmtree(dir_bandos)
    return 1

def _remove_cubic_fcs(dir_base):
    """ """
    dir_box = "./box"
    dir_init = os.getcwd()
    
    ### FC3
    for cal_type in ["fd", "lasso", "cv", "lasso"]:
        
        if cal_type in ["fd", "lasso"]:
            dir_fc3 = dir_base + "/" + output_directories["cube"]["force_%s" % cal_type]
        else:
            dir_fc3 = dir_base + "/" + output_directories["cube"]["lasso"]
        
        if os.path.exists(dir_fc3) == False:
            continue
        
        os.chdir(dir_fc3)
        os.makedirs(dir_box, exist_ok=True)
        
        if cal_type in ["fd", "lasso"]:
            for fns in (
                    glob.glob("fc3.*"),
                    glob.glob("*.fcs"),
                    glob.glob("*.xml")):
                for ff in fns:
                    shutil.move(ff, dir_box+"/"+ff)
                    msg = " Move %s to %s." % (ff, dir_box)
                    logger.info(msg)
        else:
            for ff in glob.glob("*"):
                shutil.move(ff, dir_box+"/"+ff)
                msg = " Move %s to %s." % (ff, dir_box)
                logger.info(msg)
        
        os.chdir(dir_init)
    
    os.chdir(dir_init)
    
    ### It may be better to recalculate kappa, too...
    
    return 0

def _error_in_alamode_result():
    """ Error in .result file for the previous calculation """
    dir_box = "box"
    os.makedirs(dir_box, exist_ok=True)
    for ff in glob.glob("*"):
        if ff in ["BORNINFO", "kappa.in"] or dir_box in ff:
            continue
        else:
            msg = " Move %s to %s." % (ff, dir_box)
            logger.info(msg)
            shutil.move(ff, dir_box+"/"+ff)
    return 0

