#
# isotope.py
#
# This script mainly contains Isotope class which is used to analyze
# .self_isotope file generated by Alamode.
#
# Copyright (c) 2022 Masato Ohnishi
#
# This file is distributed under the terms of the MIT license.
# Please see the file 'LICENCE.txt' in the root directory
# or http://opensource.org/licenses/mit-license.php for information.
#
import sys
import numpy as np

class Isotope():
    def __init__(self, filename=None):
        """ Read self_isotope file generated by Alamode
        
        Parameters
        -----------
        .kpoints : ndarray, float, shape=(nk,3)
            k points
        .multiplicity : array, int, shape=(nk)
            multiplicity
        .frequencies : ndarray, float, shape=(nk, nbands)
            eigenvalues
        .gammas : ndarray, float, shape=(nk, nbands)
            gamma due to isotope
        """
        self._nkpoints = None
        self._nbands = None
        
        self.filename = filename
        self.kpoints = None
        self.multiplicity = None
        self.frequencies = None
        self.gammas = None
        
        self.nk = None
        self.nbands = None

        if filename is not None:
            self._set_isotope()
    
    def _set_isotope(self):
        
        out = read_isotope(self.filename)
        self.kpoints = out[0]
        self.multiplicity = out[1]
        self.frequencies = out[2]
        self.gammas = out[3]

        self.nk = len(self.kpoints)
        self.nbands = len(self.frequencies[0])

def read_isotope(filename):
    """Read k points written in .self_isotope
    Parameters
    ------------
    .kpoints : ndarray, float, shape=(nk,3)
        each k point
    .multiplicity : array, int, shape=(nk)
        multiplicity
    .frequencies : ndarray, float, shape=(nk,3)
        eivenvalues
    .gammas : ndarray, float, shape=(nk,3)
        gamma due to isotope
    """
    out = _get_numbers(filename)
    if out is None:
        logger.error(" Error in %s" % filename)
        sys.exit()
    nk = out[0]
    nbands = out[1]
     
    # --- prepare arrays
    kpoints = np.zeros((nk, 3))
    multiplicity = np.zeros(nk)
    frequencies = np.zeros((nk,nbands))
    gammas = np.zeros((nk,nbands))
    
    lines = open(filename, 'r').readlines()
    nline = len(lines)
    
    i0 = None
    ik = -1
    for il in range(nline):
        line = lines[il]
        data = line.split()
        if len(data) == 0:
            continue
        
        # --- read multiplicity
        if "# Irreducible k point" in line:
            line_mod = line.replace('(', ' ')
            line_mod = line_mod.replace(')', ' ')
            data = line_mod.split()
            
            ### ik
            ik = int(data[-2]) - 1
            
            ### multiplicity
            multiplicity[ik] = int(data[-1])
            i0 = il
            
        elif line.find("## xk =") != -1:
            
            if il != i0 + 1:
                logger.error(" Error while reading %s." % filename)
                sys.exit()
            
            for j in range(3):
                kpoints[ik,j] = float(data[j+3])
        
        # --- read gamma
        elif ik != -1 and len(data) >= 4:
            ik = int(data[0]) - 1
            ib = int(data[1]) - 1
            frequencies[ik,ib] = float(data[2])
            gammas[ik,ib] = float(data[3])
    
    return (kpoints, multiplicity, frequencies, gammas)


def _get_numbers(filename):
    """ Return number of kpoints and bands from .self_isotope file.
    """
    lines = open(filename, 'r').readlines()
    for i in range(len(lines)):
        line = lines[-1-i]
        data = line.split()
        if len(data) != 0:
            nk = int(data[0])
            nbands = int(data[1])
            return (nk, nbands)
    return None


