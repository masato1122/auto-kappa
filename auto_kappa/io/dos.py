# -*- coding: utf-8 -*-
#
# dos.py
#
# This file creates Dos class reading .dos file generated by Alamode.
#
# Copyright (c) 2022 Masato Ohnishi
#
# This file is distributed under the terms of the MIT license.
# Please see the file 'LICENCE.txt' in the root directory
# or http://opensource.org/licenses/mit-license.php for information.
#
import numpy as np
import matplotlib.pyplot as plt

from auto_kappa.plot import set_legend

class Dos():
    def __init__(self, filename):
        """
        Variables
        ----------
        nfreq : integer
            # of frequency points
        frequencies : array, float, shape=(nfreq)
            frequencies
        dos : array, float, shape=(nfreq)
            total DOS
        dos_atom : ndarray, float, shape=(nfreq, nat)
            Atom projected DOS
        elements : array, string, shape=(nel)
            elements
        nat_el : array, integer, shape=(nel)
            # of atoms for each element
        """
        self._filename = filename    # .dos file generated by Alamode
        # self._nfreq = None           # number of frequency points
        self._natoms = None          # number of atoms in a primitive cell
        self._elem_natoms = None     # dict, number of atoms for each element. e.g. {"Si": 2, "O": 4, ...}
        ##
        self.frequencies = None      # shape=(nfreq)
        self.dos = None              # shape=(nfreq)
        self.pdos = None             # shape=(nfreq, natoms), raw data for atom projected DOS
        self.integrated_pdos = None  # dict, key: element name, value: integrated atom projected DOS, shape=(nfreq)
        
        if filename is not None:
            self.read_file()

    @property
    def filename(self):
        return self._filename
    
    @property
    def nfreq(self):
        """Number of frequency points"""
        if self.frequencies is None:
            self.read_file()
        return self.frequencies.shape[0]
    @property
    def natoms(self):
        """Number of atoms in a primitive cell"""
        if self._natoms is None:
            self.read_file()
        return self._natoms
    @property
    def nelems(self):
        """Number of elements"""
        if self._elem_natoms is None:
            self.read_file()
        return len(self._elem_natoms)
    @property
    def elem_natoms(self):
        """Number of atoms for each element"""
        if self._elem_natoms is None:
            self._set_element_info()
        return self._elem_natoms
    
    def read_file(self):
        self._set_element_info()
        self._set_dos_info()
        if self.pdos is not None:
            self._set_integrated_pdos()
    
    def _set_element_info(self):
        try:
            self._elem_natoms = get_elements(self.filename)
            self._natoms = 0
            for _, val in self._elem_natoms.items():
                self._natoms += val
        except:
            pass
    
    def _set_dos_info(self):
        self.frequencies, self.dos, self.pdos = get_dos(self.filename)
    
    def _set_integrated_pdos(self):
        """ Set integrated atom projected DOS for each element.
        """
        if self.pdos is None:
            self._set_dos_info()
        if self.pdos is None:
            return None
        
        int_pdos = {}
        count = 0
        for elem, natoms_elem in self.elem_natoms.items():
            int_pdos[elem] = np.zeros(self.nfreq)
            for ia in range(natoms_elem):
                int_pdos[elem] += self.pdos[:, count]
                count += 1
        self.integrated_pdos = int_pdos
    
    def plot(self, ax, plot_pdos=True, rotate=True, show_legend=True,
             color='black', lw=0.8, frac_lw=0.7,
             xlabel='Frequency (${\\rm cm^{-1}}$)',
             ylabel='DOS (a.u.)',
             ):
        """ Plot total DOS and atom projected DOS.
        """
        if rotate:
            xdat = self.dos
            ydat = self.frequencies
            _xlabel = ylabel
            _ylabel = xlabel
            xlabel = _xlabel
            ylabel = _ylabel
        else:
            xdat = self.frequencies
            ydat = self.dos
        
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        
        ax.plot(xdat, ydat, color=color, lw=lw, label='Total')
        
        if plot_pdos and self.integrated_pdos is not None:
            self.plot_pdos(ax, lw=lw*frac_lw, rotate=rotate)
        
        if show_legend:
            set_legend(ax, fontsize=6, loc='best', length=0.5)
        
    def plot_pdos(self, ax, lw=0.5, rotate=True):
        
        cmap = plt.get_cmap("tab10")
        
        for ie, elem in enumerate(self.integrated_pdos.keys()):
            if rotate:
                xdat = self.integrated_pdos[elem]
                ydat = self.frequencies
            else:
                xdat = self.frequencies
                ydat = self.integrated_pdos[elem]
            
            ax.plot(xdat, ydat,
                    linestyle='-', c=cmap(ie),
                    lw=lw, label=elem)
        
def get_elements(filename):
    """ Read atomic species and number of atoms for each element from DOS file.
    (The 1st and 2nd lines of .dos file)
    
    Args
    ----
    filename : string
        DOS file name (.dos file generated by Alamode)
    
    Return
    ------
    elem_natoms : dict
        Dictionary with elements as keys and number of atoms 
        for each element as values
    """
    lines = open(filename, 'r').readlines()
    data1 = lines[0].strip().split()
    data2 = lines[1].strip().split()
    elem_natoms = {}
    for i in range(len(data1)-1):
        el = data1[i+1]
        nat = int(data2[i+1])
        elem_natoms[el] = nat
    return elem_natoms

def get_nfreq(dfile):
    """Get number of frequencies
    
    Parameter
    -----------
    dfile : string
        DOS file name
    
    Return
    -----------
    nline : integer
        # of frequencies
    """
    nline = sum(1 for line in open(dfile)) - 3
    return nline

def get_dos(filename):
    """ Read DOS file with atom projected DOS.
    
    Args
    -----
    filename : string
        DOS file name (.dos file generated by Alamode)

    Returns
    -------
    dos_total : array, float, shape=(nfreq)
        Total DOS
    dos_atom : ndarray, float, shape=(nfreq, nat)
        Atom projected DOS
    """
    frequencies = []
    dos_total = []
    pdos = []
    lines = open(filename, 'r').readlines()
    count = 0
    for line in lines:
        data = line.strip().split()
        if len(data) == 0:
            continue
        if line[0] == "#":
            continue
        frequencies.append(float(data[0]))
        dos_total.append(float(data[1]))

        if len(data) > 2:
            natoms = len(data) - 2
            pdos.append([float(data[2+ia]) for ia in range(natoms)])
        
        count += 1
    
    frequencies = np.array(frequencies)
    dos_total = np.array(dos_total)
    if len(pdos) == 0:
        pdos = None
    else:
        pdos = np.array(pdos)
    return frequencies, dos_total, pdos
